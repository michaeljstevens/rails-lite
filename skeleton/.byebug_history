q
clear
new_file = File.read(new_path)
new_path = "/Users/Michael/Documents/App Academy/Projects/rails_lite/skeleton/lib/../public/cage.jpg"
res_path
body
q
y
q
res.status = 404
res.status
res = Rack::Response.new
res
q
res.methods - Object.methods
res.methods
res
q
res_path
path
q
extension
c
res_path
c
exit
res_path
s
n
q
path
path.include?("/public/")
!path.index("/public/")
!!path.index("/public/")
path.index("/public/") == true
path.index("/public/")
path
path.index
path
req.path.methods - Object.methods
req.path.class
req.path
path.class
path
req.methods - Object.methods
req
path
n
q
exit
env[path]
env.path
path
env["PATH_INFO"]
env[PATH_INFO]
env[path]
env
q
exit
e.backtrace[5]
e.backtrace[4]
e.backtrace[3]
e.backtrace[2]
e.backtrace[1]
e.backtrace[0]
e.backtrace.class
extract_formatted_source(e)
e.cause
e
e.set_backtrace
e.__bb_context
e.cause
e.methods - Object.methods
e.backtrace_locations
e.exception
e.methods - Object.methods
e.methods
body
q
exit
e.methods
e
q
exit
body
q
exit
body
path
q
exit
current_dir
q
exit
e.methods
e.class
e.backtrace
e.to_s
e.to-s
e.message
e.methods
e
q
e.type
e.message
e.methods
e
q
res['Content-Type']
res.status
res
q
exit
c
file
n
template_path
s
current_dir
current_dur
s
template_name
quit
exit
flash
self
c
params
q
match_data.names.length
match_data.names.class
match_data.length
match_data.class
match_data.captures
match_data.names
match_data.length
match_data
c
q
exit
Hash[match_data.names.zip(match_data.captures)]
match_data.names.zip
match_data.names
match_data
q
exit
Hash.new(match_data.names(match_data.captures))
Hash.new(match_data.names.(match_data.captures))
Hash.new(match_data.names.zip(match_data.captures))
match_data.names.zip
match_data.captures
match_data.names
match_data
params
match_data
c
display res.body
c
display @params
params
c
@params
q
exit
controller.params
params
c
display params
params
c
display params
params
c
q
exit
controller
params
c
q
@action_name
c
exit
controller.params
controller.invoke_action(get)
controller.invoke_action(index)
controller.invoke_action(index
controller.invoke_action
controller.res.methods.include?(index)
controller.req.methods.include?(index)
controller.req.methods
controller.methods
controller.methods, except:[:object]
controller.methods, except: [:object]
controller.methods, exclude: [:object]
controller.methods, exclude:[:object]
controller.methods, exclude:[:object}
controller
@action_name
c
params
q
1
match_data.captures
match_data.names.class
match_data.names.zip
match_data.names
match_data.name
match_data
q
match_data.
match_data.methods
match_data.each 
match_data
match_data.values
match_data.names
match_data
q
req.path
req
q
req.path == "adfs"
req.path =~ "adfs"
req.path =~ lasdfj
!!(pattern =~ req.path)
req.path =~ pattern
pattern
req.path == pattern
req.path 
req.request_method.downcase.to_sym =~ http_method
req.request_method.downcase.to_sym == http_method
http_method
req.request_method == http_method
req.request_method =~ http_method
req.request_method == http_method
req.request_method
req.path
req.methods
req
c
req
c
req
c
pattern =~ req
req
self
q
pattern
quit
exit
action_name
controller_class
http_method
pattern
exit
@session
